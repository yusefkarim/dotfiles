#!/usr/bin/nft -f

flush ruleset

# Define a table with the family inet (ip/ip6) and name filter
table inet filter {
    # Chain to filter incoming packets
	chain input {
		type filter hook input priority 0; policy drop;
        # Related and established traffic will be accepted
		ct state established,related accept
        # All loopback interface traffic will be accepted
        iifname lo accept
        # Drop any invalid traffic
		ct state invalid drop

        # Accept ICMP and IGMP
		ip6 nexthdr ipv6-icmp icmpv6 type {
            destination-unreachable, packet-too-big, time-exceeded,
            parameter-problem, mld-listener-query, mld-listener-report,
            mld-listener-done, nd-router-solicit, nd-router-advert,
            nd-neighbor-solicit, nd-neighbor-advert, ind-neighbor-solicit,
            ind-neighbor-advert, mld2-listener-report
        } accept
		ip protocol icmp icmp type {
            destination-unreachable, router-advertisement, router-solicitation,
            time-exceeded, parameter-problem
        } accept
		ip protocol igmp accept

        # New udp traffic will jump to the UDP chain
		ip protocol udp ct state new jump UDP
        # New tcp traffic will jump to the TCP chain
		ip protocol tcp tcp flags & (fin | syn | rst | ack) == syn ct state new jump TCP
        
        # Reject all traffic that was not processed by other rules
		ip protocol udp reject
		ip protocol tcp reject with tcp reset
		meta nfproto ipv4 counter reject with icmp type prot-unreachable
	}

    # Chain to associate any TCP input
	chain TCP {
        # Accept HTTP
        tcp dport { http, https, 8008, 8080, 8000 }
	}

    # Chain to associate any UDP input
	chain UDP {
        # Accept DHCPDISCOVER
        udp sport bootpc udp dport bootps ip saddr 0.0.0.0 ip daddr {
            255.255.255.255 
        } accept
        # Accept PXE
        udp sport { bootpc, 4011 } udp dport { bootps, 4011 } ip saddr {
            10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16, 169.254.0.0/16
        } accept 
	}

    # Chain to filter forwarded packets
    # Execute: sysctl net.ipv4.ip_forward=1
	chain forward {
		type filter hook forward priority 0; policy drop;
	}

    # Chain to filter outgoing packets
	chain output {
		type filter hook output priority 0; policy accept;
	}

}

