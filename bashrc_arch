#
# ~/.bashrc
#
# If not running interactively, don't do anything
[[ $- != *i* ]] && return

WHITE=$(tput setaf 223)
GRAY=$(tput setaf 007)
RED=$(tput setaf 197)
ORANGE=$(tput setaf 208)
BLUE=$(tput setaf 037)
GREEN=$(tput setaf 148)
PURPLE=$(tput setaf 98)

# ------ Environment variables -----
if [ -n "$SSH_CLIENT" ]; then SSH="[SSH]"; fi
export PS1='\[${GRAY}\][\[${RED}\]\u\[${WHITE}\]@\[${BLUE}\]\h \[${GREEN}\]\W\[${GRAY}\]]\[${PURPLE}\]${SSH}\[${ORANGE}\]\$\[${WHITE}\] '
export PATH="$HOME/.local/bin/:$HOME/.cargo/bin:$PATH"
export EDITOR="nvim"

# ----- Pretty colours -----
alias ls='ls --color=auto'
alias grep='grep --color=auto'

# ------ Safety features -----
alias cp='cp -i'
alias mv='mv -i'
alias rm='rm -i'

# ------ History -----
# Don't put duplicate lines or lines starting with space in the history.
HISTCONTROL=ignoreboth
# Append to the history file, don't overwrite it
shopt -s histappend
# See HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# ------ Pacman stuff -----
# Synchronize with repositories before upgrading packages
alias pacup='sudo pacman -Syu'
# Install specific package(s) from the repositories
alias pacin='sudo pacman -S'
# Remove/Clean orphan packages
alias paccl='sudo pacman -Rns $(pacman -Qtdq)'
# Search for package(s) in the repositories
alias pacse='pacman -Ss'
# Search for package(s) in the local database
alias paclo='pacman -Qs'
# Remove the specified package(s), its configuration(s) and unneeded dependencies
alias pacrem='sudo pacman -Rns'
# Remove the specified package(s), retaining configurations and required dependencies
alias pacre='sudo pacman -R'
# Removes old unused cached packages from /var/cache/pacman/pkg/
alias paccc='sudo pacman -Sc'
# List installed packages (local and AUR)
alias pacli='pacman -Qqe'

# ------ Functions -----
# Accepts command and a file, detaches process from terminal completely
detach() { "$1" "$2" > /dev/null 2>&1 & disown; }
vpn() { wg-quick "$1" azire; }
select_network() {  wpa_cli -i wlan0 select_network $(wpa_cli -i wlan0 list_networks | grep "$1" | cut -f 1); }
img() { feh -xZ --scale-down -B black $1 > /dev/null 2>&1 & disown; }
compress() { tar -czvf "${1}.tar.gz" "$1"; }
regex() { grep -Po $1 $2; }
mydd() { sudo dd bs=4M if="$1" of="$2" status=progress oflag=sync; }
# Decimal to hexadecimal
d2h() { python3 -c "print(hex($1))"; }
# Hexadecimal to decimal
h2d() {  python3 -c "print(int('$1', 16))"; }
# Binary to decimal
b2d() {  python3 -c "print(int('$1', 2))"; }
# Hexadecimal to ascii
h2a() {  python3 -c "print(bytearray.fromhex('$1'.strip('0x')).decode())"; }
# Install arch-wiki-docs
archfind() { find /usr/share/doc/arch-wiki/html/en/ -iname "*$1*" -exec basename {} .html ';';  }
archview() { firefox /usr/share/doc/arch-wiki/html/en/$1.html; }
wg-gen() { wg genkey | tee $1 | wg pubkey > $1.pub; }
md2pdf() { 
    filename=$(basename -- "$1")
    pandoc $1 -s $2 --pdf-engine=lualatex --highlight-style=breezedark \
        -f markdown-implicit_figures \
        -H ~/.config/pandoc/header.tex \
        -V 'mainfont:OpenSans' \
        -V fontsize=11pt -V geometry:margin=2cm -V urlcolor:blue \
        -o ${filename%.*}.pdf; 
}
cargo-clean() {
    find . -type d -name target -exec du -chs {} + | sort -h;
    read -p "Remove everything shown above [y/n]? " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]
    then
        return 1
    fi
    find -name target -type d -exec rm -r {} +;
}
data() {
	if ! mountpoint -q ~/.data; then
		sudo cryptsetup open /dev/sda3 data;
		sudo mount /dev/mapper/data ~/.data/;
		cd ~/.data;
	else
		cd;
		sudo umount ~/.data;
		sudo cryptsetup close data;
	fi
}
# Command for serial communication. Usage: serial DEVICE BAUDRATE
serial() { sudo picocom -b $2 -f n -y n -d 8 -p 1 --omap delbs -g serial.log $1; }
# Assemble, link, and dump shellcode
shellcode() { as "$1".s -o "$1".o && ld "$1".o -N -o "$1" && objcopy -O binary "$1" "$1".bin; }

# ------ Aliases -----
alias lh='ls -lh'
alias mnt='sudo mount -o uid=$USER,gid=$USER,fmask=133,dmask=022'
# Install ntfs-3g with pacman
alias ntfs='sudo mount -o uid=$USER,gid=$USER,fmask=133,dmask=022 -t ntfs-3g'
# Install jmtpfs from aur
alias android='sudo jmtpfs /mnt'
alias pdf='detach evince'
alias pdf-edit='detach xournalpp'
alias doc='detach libreoffice'
alias wiki='vim ~/Documents/wiki/index.md'
alias news='newsboat'
alias httpserver='python -m http.server'
alias scanwifi='sudo iw dev wlan0 scan'
alias sound='pulsemixer'
alias weather='curl wttr.in/Ottawa'
alias backup='rsync --delete-after -aAXHv $HOME/Documents $HOME/Carleton $HOME/Pictures $HOME/Workspace --exclude .git/ --exclude target/ backup:vigrid/'
alias backup_tar='tar -czf "laptop_backup_$(date -I).tar.gz" $HOME/Documents $HOME/Carleton $HOME/Pictures $HOME/Workspace --exclude .git/ --exclude target/'
# School Config Extension
[ -f $HOME/Carleton/.bashrc.ext ] && . $HOME/Carleton/.bashrc.ext

# ------ Graveyard -----
# sudo dd if=/dev/sdX conv=sync,noerror bs=64k | xz -c > cloned.img.xz
# unxz -c cloned.img.gz | sudo dd of=/dev/sdX
# ssh-keygen -t rsa
# openssl req -x509 -newkey rsa:4096 -days 365 -keyout $1.key -out $1.crt -nodes
# sudo trust anchor -v $1.crt
# serial() { sudo screen -L $1 $2,cs8,-parenb,-cstopb,-hupcl; }
