#
# ~/.bashrc
#
# If not running interactively, don't do anything
[[ $- != *i* ]] && return

WHITE=$(tput setaf 223)
GRAY=$(tput setaf 007)
RED=$(tput setaf 197)
ORANGE=$(tput setaf 208)
BLUE=$(tput setaf 037)
GREEN=$(tput setaf 148)
PURPLE=$(tput setaf 98)

if [ -n "$SSH_CLIENT" ]; then SSH="[SSH]"
fi

PS1='\[${GRAY}\][\[${RED}\]\u\[${WHITE}\]@\[${BLUE}\]\h \[${GREEN}\]\W\[${GRAY}\]]\[${PURPLE}\]${SSH}\[${ORANGE}\]\$\[${WHITE}\] '
PATH="$HOME/.poetry/bin:$HOME/.cargo/bin:$PATH"


# ---------------------------- ALIASES ------------------------------------

# ----- Pretty colours -----
alias ls='ls --color=auto'
alias grep='grep --color=auto'

# ------ Safety features -----
alias cp='cp -i'
alias mv='mv -i'
alias rm='rm -i'

# ------ Pacman stuff -----
# Synchronize with repositories before upgrading packages
alias pacup='sudo pacman -Syu'
# Install specific package(s) from the repositories
alias pacin='sudo pacman -S'
# Remove/Clean orphan packages
alias paccl='sudo pacman -Rns $(pacman -Qtdq)'
# Search for package(s) in the repositories
alias pacse='pacman -Ss'
# Search for package(s) in the local database
alias paclo='pacman -Qs'
# Remove the specified package(s), its configuration(s) and unneeded dependencies
alias pacrem='sudo pacman -Rns'
# Remove the specified package(s), retaining configurations and required dependencies
alias pacre='sudo pacman -R'
# Removes old unused cached packages from /var/cache/pacman/pkg/
alias paccc='sudo pacman -Sc'
# List installed packages (local and AUR)
alias pacli='pacman -Qqe'

# ------ Functions -----
# Accepts command and a file, detaches process from terminal completely
detach() { "$1" "$2" 2>&1 > /dev/null & disown; }
vpn() { wg-quick "$1" azire; }
select_network() {  wpa_cli -i wlp4s0 select_network $(wpa_cli -i wlp4s0 list_networks | grep "$1" | cut -f 1); }
img() { feh -xZ --scale-down -B black "$1" 2>&1 > /dev/null & disown; }
compress() { tar -czvf "${1}.tar.gz" "$1"; }
mydd() { sudo dd bs=4M if="$1" of="$2" status=progress oflag=sync; }
# Decimal to hexadecimal
d2h() { printf "0x%x\n" $1; }
# Hexadecimal (without 0x) to ascii
h2a() { echo -n $1 | xxd -ps -r; }
# Install arch-wiki-docs
archfind() { find /usr/share/doc/arch-wiki/html/en/ -iname "*$1*" -exec basename {} .html ';';  }
archview() { firefox /usr/share/doc/arch-wiki/html/en/$1.html; }
wg-gen() { wg genkey | tee $1 | wg pubkey > $1.pub; }
md2pdf() { 
    filename=$(basename -- "$1")
    pandoc -s --toc --variable urlcolor=blue $1 -o ${filename%.*}.pdf; 
}
# ssh-keygen -t rsa
# openssl req -x509 -newkey rsa:4096 -days 365 -keyout $1.key -out $1.crt -nodes
# sudo trust anchor -v $1.crt

# ------ Other stuff -----
alias lh='ls -lh'
alias mnt='sudo mount -o uid=$USER,gid=$USER,fmask=133,dmask=022'
# Install ntfs-3g with pacman
alias ntfs='sudo mount -o uid=$USER,gid=$USER,fmask=133,dmask=022 -t ntfs-3g'
# Install jmtpfs from aur
alias android='sudo jmtpfs /mnt'
alias pdf='detach llpp'
alias epub='detach foliate'
alias doc='detach libreoffice'
alias wiki='vim ~/Documents/wiki/index.md'
alias md='grip -b --quiet --user-content --wide'
alias httpserver='python -m http.server'
alias scanwifi='sudo iw dev wlp4s0 scan | less'
alias hdmi='xrandr --output HDMI2 --mode 2560x1600 --output eDP1 --off'
alias sound='pulsemixer'

# ------ screen command for serial communication -----
serial() { sudo screen $1 $2,cs8,-parenb,-cstopb,-hupcl; }
serial_log() { sudo screen -L $1 $2,cs8,-parenb,-cstopb,-hupcl; }
# ------ Assemble, link and dump shellcode -----
shellcode() { as "$1".s -o "$1".o && ld "$1".o -N -o "$1" && objcopy -O binary "$1" "$1".bin; }
# ------ ssh things -----
cmssh () { ssh -i ~/.ssh/node_cmadmin -p 27385 cmadmin@$1; }
cmfs () { sshfs root@172.16.50.152:/root/mxp_docker/mxp ~/CM/mxp; }
